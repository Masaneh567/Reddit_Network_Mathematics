{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "7aadccc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: praw in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (7.7.0)\n",
      "Requirement already satisfied: prawcore<3,>=2.1 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from praw) (2.3.0)\n",
      "Requirement already satisfied: websocket-client>=0.54.0 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from praw) (0.58.0)\n",
      "Requirement already satisfied: update-checker>=0.18 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from praw) (0.18.0)\n",
      "Requirement already satisfied: requests<3.0,>=2.6.0 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from prawcore<3,>=2.1->praw) (2.27.1)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.1->praw) (2021.10.8)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.1->praw) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.1->praw) (3.3)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.1->praw) (1.26.9)\n",
      "Requirement already satisfied: six in /Users/massiefatti/opt/anaconda3/lib/python3.9/site-packages (from websocket-client>=0.54.0->praw) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install praw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b2289c78",
   "metadata": {},
   "outputs": [],
   "source": [
    "personal_use_script = \"syHEd60IxNkaGM4EgHR7PQ\" \n",
    "secret = \"sfdbghfFRG7O6Bhi1AfXjdcQSNSvMQ\"\n",
    "\n",
    "import praw \n",
    "import pandas as pd\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot\n",
    "import matplotlib.pyplot as plt\n",
    "user_agent = \"scraper 1.0 by /u/massie567\" \n",
    "reddit = praw.Reddit(\n",
    "    client_id = \"syHEd60IxNkaGM4EgHR7PQ\", \n",
    "    client_secret = \"sfdbghfFRG7O6Bhi1AfXjdcQSNSvMQ\",\n",
    "    user_agent = user_agent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "6da3a74f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def influential_users(subreddit,n): #function 1: returns list of top influential users from a given subreddit. \n",
    "    subreddit = reddit.subreddit(subreddit)\n",
    "    users = [] \n",
    "    \n",
    "    \n",
    "    for post in subreddit.top(limit=n):\n",
    "        username = str(post.author) # praw API returns data in a weird format, therefore converted to 'string'.\n",
    "        if \"bot\" not in username.lower(): # deletes any bots, apparently bots always have 'bot' in their title. \n",
    "            users.append(username)\n",
    "            \n",
    "    users_df = pd.DataFrame(users, columns=['username']) # turns the array into an indexed dataframe.\n",
    "    duplicates = users_df[users_df.duplicated(keep = False)] # returns dataframe with only the duplicates.\n",
    "    influencers = duplicates.drop_duplicates() # drops the extra duplicates leaving a list of unique users. \n",
    "    influencers = influencers[influencers.username != 'None'] # deleted/suspended accounts come up as 'None' in the list.\n",
    "    influencers = influencers.reset_index(drop=True) # makes sure the dataframe index is reset.\n",
    "\n",
    "    return(influencers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "86399cef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>username</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>grepnork</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>theladynora</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>slaysia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>theindependentonline</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>BilBrowning</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Austin63867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Twoweekswithpay</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               username\n",
       "0          DaFunkJunkie\n",
       "1              grepnork\n",
       "2           theladynora\n",
       "3               slaysia\n",
       "4  theindependentonline\n",
       "5           BilBrowning\n",
       "6           Austin63867\n",
       "7       Twoweekswithpay"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yes = influential_users('politics', 100)\n",
    "yes.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "474e8d0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_posts(username): # function 2: returns top 10 posts of a reddit user. \n",
    "    redditor = reddit.redditor(username)\n",
    "    user = []\n",
    "    subreddit = []\n",
    "    \n",
    "    for post in redditor.top(limit=10):\n",
    "        user.append(username) \n",
    "        subreddit.append(str(post.subreddit)) # again turned data into a string for simplicity. \n",
    "\n",
    "    data = {'username': user, 'subreddit': subreddit} # creates an array in the format accepted by pandas dataframes. Try out the example below to see.\n",
    "#     print(data)\n",
    "    user_df = pd.DataFrame(data, columns = ['username', 'subreddit']) # turns data into a dataframe with two columns. \n",
    "    return(user_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d30e5769",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>username</th>\n",
       "      <th>subreddit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>WhitePeopleTwitter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>worldnews</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>WhitePeopleTwitter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>WhitePeopleTwitter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       username           subreddit\n",
       "0  DaFunkJunkie                pics\n",
       "1  DaFunkJunkie            politics\n",
       "2  DaFunkJunkie  WhitePeopleTwitter\n",
       "3  DaFunkJunkie                pics\n",
       "4  DaFunkJunkie                pics\n",
       "5  DaFunkJunkie           worldnews\n",
       "6  DaFunkJunkie                pics\n",
       "7  DaFunkJunkie  WhitePeopleTwitter\n",
       "8  DaFunkJunkie  WhitePeopleTwitter\n",
       "9  DaFunkJunkie                pics"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_posts('DaFunkJunkie')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "9b87deb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def user_data(subreddit,n): # function 3: using functions 2 & 3, returns the top 10 posts for each of the top influencers in a given subreddit. \n",
    "    users = influential_users(subreddit,n) # returns the dataframe of influencers.\n",
    "    \n",
    "    final_df = pd.DataFrame() # creates empty dataframe.\n",
    "    for i in range(len(users)): # here the length function refers to the no. of rows. so iterates down the rows and inputs each username into the get_posts function. \n",
    "        x = get_posts(str(users.loc[i,'username'])) # 'users.loc[i,'username'] returns the data entry in row i of the column 'username'. This is then converted to a string so get_posts can read it. \n",
    "        final_df = pd.concat([final_df, x]) # since get_posts returns a dataframe, the concat function 'concatenates' the dataframes together. so each iteration adds the top 10 posts of user i to the end of the final dataframe. \n",
    "        final_df = final_df.reset_index(drop=True) # again resets index of final dataframa. \n",
    "        \n",
    "    return(final_df)\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a4036b82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>username</th>\n",
       "      <th>subreddit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>WhitePeopleTwitter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DaFunkJunkie</td>\n",
       "      <td>pics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>Twoweekswithpay</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>Twoweekswithpay</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>Twoweekswithpay</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>Twoweekswithpay</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>Twoweekswithpay</td>\n",
       "      <td>politics</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           username           subreddit\n",
       "0      DaFunkJunkie                pics\n",
       "1      DaFunkJunkie            politics\n",
       "2      DaFunkJunkie  WhitePeopleTwitter\n",
       "3      DaFunkJunkie                pics\n",
       "4      DaFunkJunkie                pics\n",
       "..              ...                 ...\n",
       "75  Twoweekswithpay            politics\n",
       "76  Twoweekswithpay            politics\n",
       "77  Twoweekswithpay            politics\n",
       "78  Twoweekswithpay            politics\n",
       "79  Twoweekswithpay            politics\n",
       "\n",
       "[80 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_data('politics', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "ef08cb0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# exending the fucntion to graph shit \n",
    "def user_data2(subreddit,n): # function 3: using functions 2 & 3, returns the top 10 posts for each of the top influencers in a given subreddit. \n",
    "    users = influential_users(subreddit,n) # returns the dataframe of influencers.\n",
    "    \n",
    "    final_df = pd.DataFrame() # creates empty dataframe.\n",
    "    for i in range(len(users)): # here the length function refers to the no. of rows. so iterates down the rows and inputs each username into the get_posts function. \n",
    "        x = get_posts(str(users.loc[i,'username'])) # 'users.loc[i,'username'] returns the data entry in row i of the column 'username'. This is then converted to a string so get_posts can read it. \n",
    "        final_df = pd.concat([final_df, x]) # since get_posts returns a dataframe, the concat function 'concatenates' the dataframes together. so each iteration adds the top 10 posts of user i to the end of the final dataframe. \n",
    "        final_df = final_df.reset_index(drop=True) # again resets index of final dataframa. \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "    subs = list(final_df.subreddit.unique()) # Makes us a list of unique subreddits to use in network visualisation \n",
    "    unique_users = list(final_df.username.unique())\n",
    "     \n",
    "\n",
    "    graph = nx.from_pandas_edgelist(final_df, source='username', target='subreddit') \n",
    "    print(nx.info(graph)) \n",
    "    graph_layout = nx.spring_layout(graph,iterations=50,scale=2)\n",
    "    \n",
    "    nx.draw_networkx_nodes(graph,\n",
    "                           graph_layout,\n",
    "                           nodelist = subs, \n",
    "                           node_color='red',node_size=100) \n",
    "    nx.draw_networkx_nodes(graph,\n",
    "                           graph_layout,\n",
    "                           nodelist=unique_users, \n",
    "                           node_color='green', node_size=100) \n",
    "    \n",
    "    nx.draw_networkx_edges(graph, graph_layout, width=1, edge_color=\"black\") \n",
    "    \n",
    "    subreddit_node_names = dict(zip(subs,subs)) # this is the form that labels are added manually in nx needed to be in dictionary form. \n",
    "    nx.draw_networkx_labels(graph, graph_layout, labels=subreddit_node_names) \n",
    "    user_node_names = dict(zip(unique_users,unique_users)) # now adding relevant usernames as labels to the users.   \n",
    "    nx.draw_networkx_labels(graph, graph_layout, labels=user_node_names)\n",
    "    plt.axis('off')\n",
    "    plt.title(\"network graph to visualise influental users in releant subreddits\") \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "f58193bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jj/lt9l4w8160jbw1h0vggv1shc0000gn/T/ipykernel_827/4015815090.py:26: DeprecationWarning: info is deprecated and will be removed in version 3.0.\n",
      "\n",
      "  print(nx.info(graph))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Graph with 16 nodes and 19 edges\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "user_data2('politics', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13ae01d8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
